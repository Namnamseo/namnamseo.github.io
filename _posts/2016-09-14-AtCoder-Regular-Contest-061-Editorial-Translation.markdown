---
layout: post
title: AtCoder Regular Contest 061 Editorial 번역
category: [AtCoder, AtCoder Regular Contest, Editorial]
---

[대회 링크](https://arc061.contest.atcoder.jp).
[Editorial 링크](http://arc061.contest.atcoder.jp/data/arc/061/editorial.pdf).

## C. 많은 수식(たくさんの数式 / Many Formulas)

[문제 링크](http://arc061.contest.atcoder.jp/tasks/arc061_a)

주어지는 문자열의 길이가 10 이하이기 때문에, 각각의 문자와 문자 사이에 `+`를 넣을지 말지를 전탐색으로 시험해보는 것이 가능합니다.  
몇 번째의 숫자의 뒤에 `+`를 넣을지를 모두 결정하고 나면, `split` 등의 함수가 있는 언어라면, 실제로 새롭게 `+`를 넣어 문자열을 만들고, 쪼개서 계산하는 것이 가능합니다. 그렇지 않더라도, 앞에서 순서대로 보면서,

* 숫자가 있을 때마다 현재의 값을 10배 하고 지금 쓰여있는 숫자의 값을 더한다
* `+`가 나오면 현재의 값이 `+`의 직전의 값과 같기 때문에, 답에 현재의 값을 더한다
* 마지막에는 +가 등장하지 않고 수식이 끝나기 때문에, 그 때의 값을 따로 더한다

로 하면, 새로 만든 수식의 값을 구할 수 있습니다.

## D. 스누케 군의 색칠공부 (すぬけ君の塗り絵 / Snuke's Coloring)

[문제 링크](http://arc061.contest.atcoder.jp/tasks/arc061_b)

격자판이 넓기 때문에, 실제로 2차원 배열에 칠하는 걸 시뮬레이션하는 것은 불가능합니다. 또한, N이 $$10^5$$만큼 크기 때문에, 좌표압축한 뒤에도, 메모리 사용량이 $$O(N^{2})$$가 되어 부담스럽습니다.  
여기서 알아야 할 포인트는, **한 개의 검게 칠해진 칸이 영향을 주는 범위는, 그 주변의 3x3 영역밖에 없다**라는 것입니다. 즉, 각각의 검게 칠해진 칸에 대해서, 이들의 주변의 적은 수의 칸만 어떤 처리를 하는 것만으로도 계산할 수 있다면, 빠르게 답을 구할 수 있을 것입니다.  
$$(i,j)$$를, 위에서 $$i$$번째 행의 왼쪽에서 $$j$$번째 칸을 왼쪽 위로 가지는 3x3의 정사각형을 나타낸다고 합시다. 위에서 $$p$$번째 행의 왼쪽에서 $$q$$번째 칸을 검게 칠하면, $$(p-k,q-l) \quad (k,l \in \{0,1,2\})$$에 포함되는 검은 칸이 한 개 늘어납니다. (하지만, 이 정사각형이 격자판을 벗어나는 경우는 제외해야 합니다.)

따라서, 입력으로 주어진 점들에 대해 그 점을 포함하는 3x3 정사각형의 왼쪽 위 점을 모두 열거하여 (최대 9N개의 점을 열거) 각각의 점이 몇번 등장하는지를 세어주면 됩니다.  
이것은 `pair`형 등으로 $$(i,j)$$를 정렬하여 앞에서부터 순서대로 같은 값이 몇 번 등장하는지를 세어주어도 좋고, `map` 등의 자료구조를 이용해도 좋습니다.  
마지막에는 0개인 칸의 수를 세기 위해, 전체 $$(H-2)(W-2)$$개 중 한 개라도 포함하고 있는 칸의 수를 빼주면 됩니다.

계산량은 $$O(NlogN)$$입니다.

## E. 스누케 군의 지하철 여행 (すぬけ君の地下鉄旅行 / Snuke's Subway Trip)

[문제 링크](http://arc061.contest.atcoder.jp/tasks/arc061_c)

(현재 있는 역, 가장 마지막으로 썼던 회사)를 정점으로 최단거리 문제를 해결하는 것으로 답을 구할 수 있습니다. 이 해법에는, 정점수가 최대 $$O(M)$$입니다. 왜냐하면, 각각의 역에 도달하는 데에 가장 마지막으로 사용하였던 회사의 종류의 수는, 최대 그 역에서 출발하는 노선의 수와 같습니다. 이 갯수를 모든 역마다 합해도, 노선의 수의 정수배를 넘지 않습니다.  
하지만, 간선을 효율적으로 추가하지 않으면, 변의 갯수가 $$O(M^{2})$$가 되어버려, 제한시간 내에 계산할 수 없습니다.

다음과 같은 방법으로 변을 추가하면 변의 수가 최대 $$O(N+M)$$으로 해결할 수 있습니다.

* 같은 회사의 노선으로 갈아타는 경우에, 길이가 0인 변을 모든 노선의 목적지와 잇는다.
* 다른 회사의 노선으로 갈아타는 경우를 대신해서, (현재 있는 역, -1)이라는 정점을 향하는 길이가 0인 변을 추가한다. (개찰구에서 밖으로 나가는 이미지)
* (현재 있는 역, -1)의 정점에서 모든 회사의 노선에 대해 목적지에 길이 1인 변을 추가한다. (개찰구에서 다시 들어가는 이미지, 이 시점에서 새롭게 요금이 부과된다)
* 시작점은 (1,-1), 목적지는 (N,-1)의 정점.

나머지는 Dijkstra 알고리즘 등으로 충분히 빠른 시간 내에 답을 구할 수가 있습니다.

## F. 셋이서 카드 게임 (3人でカードゲーム / Card Game for Three)

[문제 링크](http://arc061.contest.atcoder.jp/tasks/arc061_d)

### 6. 1. 부분점수 방법

이 문제에서는, 세 명이 각자의 카드를 $$N, M, K$$장만큼 가지고 있는 설정입니다만, 누군가가 카드를 다 써버려서 게임에서 승리할 때까지의 동작에 대해서, "누군가가 카드를 꺼낸다" 조작의 반복으로 생각할 수 있습니다. 즉 세 가지의 카드열을 생각하는 대신, 한 개의 카드열로 생각할 수 있습니다.  
이 상황 하에서 A씨가 승리하는 필요충분 조건은, 하나로 만든 카드열에서 b가 M회 이하, c가 K회 이하 등장할 때 a가 N회 나오는 것입니다. N회째의 a가 등장하는 것이, 전체에서 몇 턴 째에 해당하는지를 모두 시험해봅니다.
$$i$$ 터에서 N번째 a가 등장했을 때, 조건을 만족하는 배치의 갯수는

* $$i$$턴에 사용되지 않았던 나머지 카드의 선택 방법 $$3^{N+M+K-i}$$가지
* $$i-1$$턴 이전에 a가 N-1회 나왔을 위치의 선택 방법 $$_{i-1}C_{N-1}$$가지
* a가 아닌 것이 나왔을 $$i-N$$턴을 $$b$$와 $$c$$로 채우는 방법의 수

의 곱입니다.

앞의 두 개는 간단히 계산할 수 있습니다. 마지막 것은, $$_{i-N}C_{k} \quad (\max (0,i-N-c) \leq k \leq min(i-N,b) )$$의 합입니다. 이것들을 전부 하나하나 계산하면 $$O((M+K)^{2})$$가 되어, 부분점수를 받을 수 있습니다.

### 6. 2. 만점 방법

앞의 이항계수를 연속하여 합하는 범위를 모든 $$i$$에 대해 파스칼의 삼각형 위에 그려보면, 이러한 그림이 됩니다.

```
       *
      * *
     * * *
    * * * .
   * * * . .
  . * * . . .
 . . * . . . .
. . . . . . . .
```

이것들을, 윗 단부터 한 단 한 단 계산해나갑니다.  
첫 번째 단의 값은 1입니다.  
여기서 내려갈 때, 왼쪽 아래, 오른쪽 아래에 새롭게 추가되는 경우, 그 단의 총합은 윗 단의 두 배가 됩니다.  
오른쪽 아래와 오른쪽 아래 중 한 쪽에만 추가되는 경우, 그 단의 총합은, 그 윗 단의 총합의 두 배에서, 추가되지 않은 끝부분에 영향을 준 윗 단의 값을 빼서 구할 수 있습니다.  
양 쪽 모두 추가되지 않는 경우, 그 단의 총합은, 그 윗 단의 총합의 두 배에서, 추가되지 않은 양 쪽 끝부분에 영향을 준 윗 단의 값을 빼서 구할 수 있습니다.

이렇게 계산하면 계산량 $$O(M+K)$$로 만점을 받을 수 있습니다.